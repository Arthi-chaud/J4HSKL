-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Manage &amp; export JSON data
@package J4HSKL
@version 0.1.0.0


module BasicParser

-- | A <a>ParserFunction</a> function take a string a parameter, maybe
--   returns a successfull value of type "a" tuppled with a string (the
--   rest of the string)
type ParserFunction a = String -> Maybe (a, String)

-- | A <a>Parser</a> of type "a" holds a <a>ParserFunction</a> of same
--   type.
data Parser a
Parser :: ParserFunction a -> Parser a
[runParser] :: Parser a -> ParserFunction a

-- | Calls "parser1" and calls "parser2" on what "parser1" didn't parse and
--   returns a tupple of "parser1" and "parser2"
(<&>) :: Parser a -> Parser b -> Parser (a, b)

-- | XOR parser
(<^>) :: Parser a -> Parser a -> Parser a

-- | Calls "p1", and passing "p2" the parsed value. Returns the result of
--   "p2"
(<%>) :: Parser String -> Parser a -> Parser a

-- | Parse the first element of the stream
parseHead :: Parser Char

-- | If the argument is the first element in the string, returns it
--   Otherwise, returns <a>Nothing</a>
parseChar :: Char -> Parser Char

-- | If one char of the first argument is the first element in the string,
--   returns it Otherwise, returns <a>Nothing</a>
parseAnyChar :: String -> Parser Char

-- | Calls <a>&lt;&amp;&gt;</a> and applies "func" on the result
parseAndWith :: (a -> b -> c) -> Parser a -> Parser b -> Parser c

-- | While "p" doesn't returns <a>Nothing</a>, it is called on the rest
--   Returns an array of parsed values. Never returns <a>Nothing</a>
parseMany :: Parser a -> Parser [a]

-- | While "p" doesn't returns <a>Nothing</a>, it is called on the rest
--   Returns an array of parsed values. Returns <a>Nothing</a> if the array
--   is empty
parseSome :: Parser a -> Parser [a]

-- | Parse unsigned integer from string
parseUInt :: Parser Integer

-- | Parse signed integer from string
parseInt :: Parser Integer

-- | Parse floating point number from string, returns <a>Nothing</a> if is
--   NOT a floating point number
parseFloat :: Parser Float

-- | Extract what's in the parenthesis
parseScope :: (Char, Char) -> Parser String

-- | Parse anything that is a whitespace (using <a>isSpace</a>)
parseWhitespaces :: Parser String

-- | Parse String While function returns true, Nothing if <a>Nothing</a>
--   was parsed
parseWhile :: (Char -> Bool) -> Parser String

-- | Parse String if function returns true
parseIf :: (Char -> Bool) -> Parser Char

-- | Run parser n times
parseN :: Int -> Parser a -> Parser [a]

-- | Parse the string from the stream if it exists
parseString :: String -> Parser String

-- | Parse anything that is not a whitespace
parseWord :: Parser String
instance GHC.Base.Functor BasicParser.Parser
instance GHC.Base.Applicative BasicParser.Parser
instance GHC.Base.Alternative BasicParser.Parser
instance GHC.Base.Monad BasicParser.Parser


module J4HSKL.Data

-- | Defines types of JSON Values
data JSONValue

Null :: JSONValue

-- | Boolean for JSON
Bool :: Bool -> JSONValue

-- | Number for JSON
Number :: Float -> JSONValue

-- | String for JSON
String :: String -> JSONValue

-- | Array for JSON
Array :: [JSONValue] -> JSONValue

-- | Pair for Objects (only used in object, never as standalone)
Pair :: (String, JSONValue) -> JSONValue

-- | JSON's Object
Object :: [JSONValue] -> JSONValue

-- | Fromat String for JSON (without quotes)
showJSONString :: String -> String

-- | Format Number for JSON
showJSONNumber :: Float -> String
instance GHC.Show.Show J4HSKL.Data.JSONValue
instance GHC.Classes.Eq J4HSKL.Data.JSONValue


module J4HSKL.Parser

-- | Parse Values fron JSON Data
parseJSON :: Parser JSONValue

-- | Same as <a>parseJSON</a> but returns <a>Nothing</a> if unparsed
--   content
parseStrictJSON :: String -> Maybe JSONValue

-- | Parse null from JSON Data
parseJSONNull :: Parser JSONValue

-- | Parse boolean from JSON Data
parseJSONBool :: Parser JSONValue

-- | Parse Number from JSON Data
parseJSONNumber :: Parser JSONValue

-- | Parse String from JSON Data
parseJSONString :: Parser JSONValue

-- | Parse Object from JSON Data. Returns <a>Nothing</a> of parsed object
--   has duplicate keys
parseJSONObject :: Parser JSONValue

-- | Parse pair in object from JSON
parseJSONPair :: Parser JSONValue

-- | Parse Array from JSON
parseJSONArray :: Parser JSONValue

-- | Parse collection (array or object) from JSON using delimiters and a
--   value parser
parseJSONCollection :: Char -> Char -> Parser a -> Parser [a]


module J4HSKL.File

-- | Export value to JSON-formatted in file
exportJSON :: JSONValue -> FilePath -> IO ()

-- | Dump data to JSON-formatted string, with indentation
dumpJSON :: JSONValue -> String
dumpJSONCollection :: Char -> Char -> Int -> [JSONValue] -> String
dumpJSONCollectionContent :: Char -> Char -> Int -> [JSONValue] -> String

-- | Import a file's content and parse its JSON content
importJSON :: FilePath -> IO JSONValue

module J4HSKL
